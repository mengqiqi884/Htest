<?php

namespace v2\models;

use common\helpers\ArrayHelper;
use v2\MyActiveRecord;
use Yii;
use yii\helpers\Url;

/**
 * This is the model class for table "user".
 *
 * @property string $user_id
 * @property string $username
 * @property integer $sex
 * @property string $logo
 * @property integer $type
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $is_del
 * @property integer $brand_id
 */
class User extends MyActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'user';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['sex', 'type', 'created_at', 'updated_at', 'is_del', 'brand_id','is_recommend','recommend_id'], 'integer'],
            [['username'], 'string', 'max' => 100],
            [['logo'], 'string', 'max' => 500],
            [['registerid'],'string','max'=>50],
            [['plate_nu'],'string','max'=>30],
            [['address'],'string','max'=>255],
            [['lnt','lat'],'string','max'=>50],
            [['paypwd'],'string','max'=>32]
        ];
    }


    public function getLogin(){
        return $this->hasOne(Login::className(),['user_id'=>'user_id']);
    }

    public function getBrand(){
        return $this->hasOne(Brand::className(),['brand_id'=>'brand_id']);
    }

    public function fields()
    {
        $res =  parent::fields(); // TODO: Change the autogenerated stub
        unset($res['is_recommend']);
        unset($res['address']);
        unset($res['registerid']);
        unset($res['paypwd']);
        unset($res['lat']);
        unset($res['lnt']);
        unset($res['created_at']);
        unset($res['updated_at']);
        unset($res['is_del']);
        return $res;
    }

    public function extraFields()
    {
        $res = parent::extraFields(); // TODO: Change the autogenerated stub
        $res['token'] = function(){return $this->login->token;};
        $res['phone'] = function(){return $this->login->account;};
        $res['brand_name'] = function(){

            return empty($this->brand) ? '' : $this->brand->name;
        };
        $res['brand_logo'] = function(){return empty($this->brand) ? '' : Url::to($this->brand->logo,true);};
        $res['sex_name'] = function(){
          $arr = [
              '0'=>'保密',
              '1'=>'男',
              '2'=>'女'
          ];
            return $arr[$this->sex];
        };
        $res['user_type'] = function(){
            $arr = [
                '1'=>'普通用户',
                '2'=>'员工',
                '3'=>'管理员'
            ];
            return $arr[$this->type];
        };
        return $res;
    }

    public static function info(){
        return ['phone','token','brand_name','brand_logo','user_type'];
    }


    /**
     * 获取所有的锁客
     * @param $lat
     * @param $lnt
     * @param $limit
     * @param $offset
     */
    public static function customAll($lat, $lnt, $limit, $offset,$user_id){
        $users = User::find()
            ->select('user.username,user.type,user.sex,user.address,user.user_id,user.logo')
            ->addSelect(['distance'=>ArrayHelper::getDistinces($lat,$lnt,'user.lat','user.lnt'),
                'sex_name'=>'sex_const.value',
                'type_name'=>'type_const.value',
                'brand_name'=>'brand.name',
                'brand_logo'=>'brand.logo',
                'is_friend'=>'friend.tag'
            ])
            ->where(['user.is_del'=>0,'user.type'=>1])
            ->leftJoin('friend','user.user_id = friend.buser_id and friend.user_id=:user_id',[':user_id'=>$user_id])
            ->leftJoin('const as sex_const','sex_const.type = :sex and user.sex = sex_const.key',[':sex'=>'sex'])
            ->leftJoin('const as type_const','type_const.type = :type and user.type = type_const.key',[':type'=>'utype'])
            ->leftJoin('brand','brand.brand_id = user.brand_id')
            ->limit($limit)
            ->offset($offset)
            ->asArray()
            ->all();
        return $users;
    }

    /**
     * 对
     * @param $v
     */
    public static function doMap($v){
        $v['distance'] = ArrayHelper::getDistanceInfo($v['distance']);
        $v['brand_logo'] = Url::to($v['brand_logo'],true);
        return $v;
    }

    public static function mapAll($user_id,$lat,$lnt,$limit,$offset){
        $lock_query = Parkspot::find()
            ->select('user.username,user.type,user.sex,user.address,user.user_id,user.logo')
            ->addSelect(['distance'=>ArrayHelper::getDistinces($lat,$lnt,'parkspot.lat','parkspot.lnt'),
                'sex_name'=>'sex_const.value',
                'type_name'=>'type_const.value',
                'brand_name'=>'brand.name',
                'brand_logo'=>'brand.logo',
                'sale_price'=>'parkperiod.price',
                'sale_type'=>'parkperiod.type',
                'sale_type_name'=>'sale_type.value',
                'lat'=>'parkspot.lat',
                'lnt'=>'parkspot.lnt',
                'is_open'=>'parkspot.is_open',
                'park_id'=>'parkspot.park_id'
            ])
            ->where(['parkspot.is_del'=>0,'user.is_del'=>0])
            ->andWhere('user.user_id !=:user_id2',[':user_id2'=>$user_id])
            ->leftJoin('user','user.user_id = parkspot.user_id')
            ->leftJoin('const as sex_const','sex_const.type = :sex and user.sex = sex_const.key',[':sex'=>'sex'])
            ->leftJoin('const as type_const','type_const.type = :type and user.type = type_const.key',[':type'=>'utype'])
            ->leftJoin('brand','brand.brand_id = user.brand_id')
            ->leftJoin('parkperiod','parkperiod.park_id = parkspot.park_id')
            ->leftJoin('const as sale_type','sale_type.type = :sale_type and parkperiod.type = sale_type.key',[':sale_type'=>'sale_type'])
            //->groupBy('user.username')
            ->having('distance < :distance',[':distance'=>static::DISTANCE])
            ->limit($limit)
            ->offset($offset);

        $users_query = User::find()
            ->select('user.username,user.type,user.sex,user.address,user.user_id,user.logo')
            ->addSelect(['distance'=>ArrayHelper::getDistinces($lat,$lnt,'user.lat','user.lnt'),
                'sex_name'=>'sex_const.value',
                'type_name'=>'type_const.value',
                'brand_name'=>'brand.name',
                'brand_logo'=>'brand.logo',
                'sale_price'=>'user.brand_id',
                'sale_type'=>'user.brand_id',
                'sale_type_name'=>'user.brand_id',
                'lat'=>'user.lat',
                'lnt'=>'user.lnt',
                'is_open'=>'user.brand_id',
                'park_id'=>'user.brand_id'
            ])
            ->where(['user.is_del'=>0,'user.type'=>1])
            ->andWhere('user.user_id !=:user_id',[':user_id'=>$user_id])
            ->leftJoin('const as sex_const','sex_const.type = :sex and user.sex = sex_const.key',[':sex'=>'sex'])
            ->leftJoin('const as type_const','type_const.type = :type and user.type = type_const.key',[':type'=>'utype'])
            ->leftJoin('brand','brand.brand_id = user.brand_id')
            ->groupBy('user.username')
            ->having('distance < :distance',[':distance'=>static::DISTANCE])
            ->limit($limit)
            ->offset($offset);
        $res = $lock_query->union($users_query)->asArray()->all();

        return $res;
    }

    public static function nearBy($user_id,$lat,$lnt,$limit,$offset,$sex,$price,$distance){
        $lock_query = Parkspot::find()
            ->select('user.username,user.type,user.sex,user.address,user.user_id,user.logo')
            ->addSelect(['distance'=>ArrayHelper::getDistinces($lat,$lnt,'parkspot.lat','parkspot.lnt'),
                'sex_name'=>'sex_const.value',
                'type_name'=>'type_const.value',
                'brand_name'=>'brand.name',
                'brand_logo'=>'brand.logo',
                'sale_price'=>'parkperiod.price',
                'sale_type'=>'parkperiod.type',
                'sale_type_name'=>'sale_type.value',
                'lat'=>'parkspot.lat',
                'lnt'=>'parkspot.lnt',
                'is_open'=>'parkspot.is_open',
                'park_id'=>'parkspot.park_id'
            ])
            ->where(['parkspot.is_del'=>0,'user.is_del'=>0,'user.type'=>2])
            ->andWhere('user.user_id !=:user_id2',[':user_id2'=>$user_id])
            ->andFilterWhere([
                'user.sex' => $sex
            ])
            ->andFilterWhere(['<','parkperiod.price',$price])
            ->leftJoin('user','user.user_id = parkspot.user_id')
            ->leftJoin('const as sex_const','sex_const.type = :sex and user.sex = sex_const.key',[':sex'=>'sex'])
            ->leftJoin('const as type_const','type_const.type = :type and user.type = type_const.key',[':type'=>'utype'])
            ->leftJoin('brand','brand.brand_id = user.brand_id')
            ->leftJoin('parkperiod','parkperiod.park_id = parkspot.park_id')
            ->leftJoin('const as sale_type','sale_type.type = :sale_type and parkperiod.type = sale_type.key',[':sale_type'=>'sale_type'])
            ->groupBy('user.username');

        $users_query = User::find()
            ->select('user.username,user.type,user.sex,user.address,user.user_id,user.logo')
            ->addSelect(['distance'=>ArrayHelper::getDistinces($lat,$lnt,'user.lat','user.lnt'),
                'sex_name'=>'sex_const.value',
                'type_name'=>'type_const.value',
                'brand_name'=>'brand.name',
                'brand_logo'=>'brand.logo',
                'sale_price'=>'user.brand_id',
                'sale_type'=>'user.brand_id',
                'sale_type_name'=>'user.brand_id',
                'lat'=>'user.lat',
                'lnt'=>'user.lnt',
                'is_open'=>'user.brand_id',
                'park_id'=>'user.brand_id'
            ])
            ->where(['user.is_del'=>0,'user.type'=>1])
            ->andWhere('user.user_id !=:user_id',[':user_id'=>$user_id])
            ->andFilterWhere([
                'user.sex' => $sex
            ])
            ->leftJoin('const as sex_const','sex_const.type = :sex and user.sex = sex_const.key',[':sex'=>'sex'])
            ->leftJoin('const as type_const','type_const.type = :type and user.type = type_const.key',[':type'=>'utype'])
            ->leftJoin('brand','brand.brand_id = user.brand_id')
            ->groupBy('user.username');
        if($distance == null){
            $lock_query = $lock_query->having('distance < :distance',[':distance'=>static::DISTANCE])
                ->limit($limit)
                ->offset($offset);
            $users_query = $users_query->having('distance < :distance',[':distance'=>static::DISTANCE])
                ->limit($limit)
                ->offset($offset);
        }else{
            $lock_query = $lock_query->having('distance < :distance',[':distance'=>$distance])
                ->limit($limit)
                ->offset($offset);
            $users_query = $users_query->having('distance < :distance',[':distance'=>$distance])
                ->limit($limit)
                ->offset($offset);
        }

        $res = $lock_query->union($users_query)->asArray()->all();

        return $res;
    }

    /**
     * mapall array_map回调
     * @param $v
     * @return mixed
     */
    public static function mapUnionMap($v){
        $v['distance'] = ArrayHelper::getDistanceInfo($v['distance']);
        $v['brand_logo'] = Url::to($v['brand_logo'],true);
        if($v['type'] == 1){
            $v['sale_price'] = '';
            $v['sale_type'] = '';
            $v['sale_type_name'] = '';
            $v['is_open'] = '';
            $v['park_id'] = '';
        }
        return $v;
    }


    /**
     * mapall array_map回调
     * @param $v
     * @return mixed
     */
    public static function mapUnionMap2($v){
        $v['distance'] = ArrayHelper::getDistanceInfo($v['distance']);
        $v['brand_logo'] = Url::to($v['brand_logo'],true);
        if($v['type'] == 1){
            $v['sale_price'] = '';
            $v['sale_type'] = '';
            $v['sale_type_name'] = '';
            $v['is_open'] = '';
        }
        return $v;
    }
    /**
     * 根据用户名搜索用户
     */
    public static function searchUser($name,$user_id,$lat,$lnt,$limit,$offset){
        $res = static::find()
            ->select('user.username,user.type,user.sex,user.address,user.user_id,user.logo,parkspot.is_open')
            ->addSelect(['distance'=>ArrayHelper::getDistinces($lat,$lnt,'user.lat','user.lnt'),
                'sex_name'=>'sex_const.value',
                'type_name'=>'type_const.value',
                'brand_name'=>'brand.name',
                'brand_logo'=>'brand.logo',
                'sale_price'=>'parkperiod.price',
                'sale_type'=>'parkperiod.type',
                'sale_type_name'=>'sale_type.value'
            ])
            ->where(['like','user.username',$name])
            ->andWhere('user.user_id != :user_id',[':user_id'=>$user_id])
            ->leftJoin('const as sex_const','sex_const.type = :sex and user.sex = sex_const.key',[':sex'=>'sex'])
            ->leftJoin('const as type_const','type_const.type = :type and user.type = type_const.key',[':type'=>'utype'])
            ->leftJoin('brand','brand.brand_id = user.brand_id')
            ->leftJoin('parkspot','parkspot.user_id = user.user_id')
            ->leftJoin('parkperiod','parkperiod.park_id = parkspot.park_id')
            ->leftJoin('const as sale_type','sale_type.type = :sale_type and parkperiod.type = sale_type.key',[':sale_type'=>'sale_type'])
            ->limit($limit)
            ->offset($offset)
            ->asArray()
            ->all();
        return $res;
    }


    public static function userinfo($user_id,$park_id,$lat,$lnt,$your_user_id){
        $userinfo = User::findOne($user_id);
        if($userinfo->type == 1){
            $userinfo = User::find()
                ->select('user.username,user.type,user.sex,user.address,user.user_id,user.logo')
                ->addSelect(['distance'=>ArrayHelper::getDistinces($lat,$lnt,'user.lat','user.lnt'),
                    'sex_name'=>'sex_const.value',
                    'type_name'=>'type_const.value',
                    'brand_name'=>'brand.name',
                    'brand_logo'=>'brand.logo',
                    'is_friend'=>'friend.tag'
                ])
                ->where(['user.user_id'=>$user_id])
                ->leftJoin('friend','user.user_id = friend.buser_id and friend.user_id=:user_id',[':user_id'=>$your_user_id])
                ->leftJoin('const as sex_const','sex_const.type = :sex and user.sex = sex_const.key',[':sex'=>'sex'])
                ->leftJoin('const as type_const','type_const.type = :type and user.type = type_const.key',[':type'=>'utype'])
                ->leftJoin('brand','brand.brand_id = user.brand_id')
                ->asArray()
                ->one();
        }else{
            $userinfo = static::find()
                ->select('user.username,user.type,user.sex,user.address,user.user_id,user.logo,parkspot.is_open,parkspot.park_id')
                ->addSelect(['distance'=>ArrayHelper::getDistinces($lat,$lnt,'parkspot.lat','parkspot.lnt'),
                    'sex_name'=>'sex_const.value',
                    'type_name'=>'type_const.value',
                    'brand_name'=>'brand.name',
                    'brand_logo'=>'brand.logo',
                    'sale_price'=>'parkperiod.price',
                    'sale_type'=>'parkperiod.type',
                    'sale_type_name'=>'sale_type.value',
                    'is_friend'=>'friend.tag',
                    'province'=>'parkspot.province',
                    'city'=>'parkspot.city',
                    'district'=>'parkspot.district',
                    'address'=>'parkspot.address',
                    'building'=>'parkspot.building',
                    'step_one'=>'parkboot.step_one',
                    'step_two'=>'parkboot.step_two',
                    'step_three'=>'parkboot.step_three',
                    'step_four'=>'parkboot.step_four',
                    'pic'=>'parkboot.pic',
                    'start_time'=>'parkperiod.start_time',
                    'end_time'=>'parkperiod.end_time',
                    'price'=>'parkperiod.price'
                    ]
                )
                ->where(['user.user_id'=>$user_id])
                ->leftJoin('const as sex_const','sex_const.type = :sex and user.sex = sex_const.key',[':sex'=>'sex'])
                ->leftJoin('const as type_const','type_const.type = :type and user.type = type_const.key',[':type'=>'utype'])
                ->leftJoin('brand','brand.brand_id = user.brand_id')
                ->leftJoin('friend','user.user_id = friend.buser_id and friend.user_id=:user_id',[':user_id'=>$your_user_id]);
                if(empty($park_id)){
                   $userinfo = $userinfo->leftJoin('parkspot','parkspot.user_id = user.user_id and parkspot.is_open = 1 and parkspot.is_del=0')
                        ->leftJoin('parkperiod','parkperiod.park_id = parkspot.park_id')
                        ->leftJoin('const as sale_type','sale_type.type = :sale_type and parkperiod.type = sale_type.key',[':sale_type'=>'sale_type'])
                        ->leftJoin('parkboot','parkboot.park_id = parkspot.park_id')
                        ->leftJoin('lock','lock.lock_id = parkspot.lock_id and lock.parkspot_id !=0');
                }else{
                    $userinfo = $userinfo->leftJoin('parkspot','parkspot.user_id = user.user_id and parkspot.park_id = :park_id and parkspot.is_del=0',[':park_id'=>$park_id])
                        ->leftJoin('parkperiod','parkperiod.park_id = parkspot.park_id')
                        ->leftJoin('const as sale_type','sale_type.type = :sale_type and parkperiod.type = sale_type.key',[':sale_type'=>'sale_type'])
                        ->leftJoin('parkboot','parkboot.park_id = parkspot.park_id')
                        ->leftJoin('lock','lock.lock_id = parkspot.lock_id and lock.parkspot_id !=0');
                }
                $userinfo = $userinfo->asArray()->one();

        }

        return $userinfo;
    }

    public static function walkBack(&$v,$key){
        if($key =='distance' && $v != null){
            $v = ArrayHelper::getDistanceInfo($v);
        }
        if($key =='brand_logo' && $v != null){
            $v = Url::to($v,true);
        }

    }

    public static function find()
    {
        return new UserQuery(get_called_class()); // TODO: Change the autogenerated stub
    }

//    public function getParkscount(){
//        return $this->HasMany(Parkspot::className(),['user_id'=>'user_id'])
//            ->addSelect(['count_parks'=>'count(parkspot.user_id)','user_id']);
//    }
}